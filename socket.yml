name: aws-face-auth
description: User auth/register socket with aws rekognition
version: 0.0.1
keywords:
  - user
  - face-auth
  - auth
  - authentication
  - register
  - aws
  - rekognition
config:
  AWS_REGION:
    description: AWS region
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: AWS secret access key
    long_description: |
      Visit link to know more about managing keys
      (http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html).
    required: true
  AWS_ACCESS_KEY_ID:
    description: AWS access key id
    long_description: |
      Visit link to know more about managing keys
      (http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html).
    required: true

classes:
  user:
    - name: face_auth
      type: boolean
      filter_index: true
    - name: external_face_id
      type: string
      filter_index: true

endpoints:
  create_collection:
    description: Creates a collection in an AWS Region
    parameters:
      collectionId:
        type: string
        description: "ID for the collection that you are creating"
        example: "SyncanoFaces"
    response:
      mimetype: application/json
      examples:
        -
          exit_code: 200
          description: Success
          example: |
            {
            "collectionArn": "12345",
            "statusCode": 200
            }
        -
          exit_code: 400
          description: Failed
          example: |
            {
              "statusCode": 400,
              "code": "ResourceAlreadyExistsException",
              "message":"A collection with the specified ID already exists."
            }
  delete_collection:
    description: Deletes a collection in an AWS Region
    parameters:
      collectionId:
        type: string
        description: "ID of the collection to delete"
        example: "SyncanoFaces"
    response:
      mimetype: application/json
      examples:
        -
          exit_code: 200
          description: Success
          example: |
            {
            "statusCode": 200
            }
        -
          exit_code: 400
          description: Failed
          example: |
            {
              "statusCode": 400,
              "code": "AccessDeniedException",
              "message":"You are not authorized to perform the action."
            }
  face_register:
    description: |
      Register face to existing user account for face authentication.
      Client-side to send user's username and password(expected user to approve by confirming password)
      to register face to user's account.
    parameters:
      username:
        type: string
        description: "Username of user"
        example: "you@domain.com"
      password:
        type: string
        description: "Password of user"
        example: ""
      collectionId:
        type: string
        description: "ID of the collection"
        example: "SyncanoFaces"
      image:
        type: string
        description: "Path to image or an S3 object key"
      bucketName:
        type: string
        description: "Name of s3 bucket. Leave empty if image not on s3 bucket."
    response:
      mimetype: application/json
      examples:
        -
          exit_code: 200
          description: Success
          example: |
            {
              "message": "User account registered for face authentication."
            }
        -
          exit_code: 400
          description: Failed
          example: |
            {
              "message": "Fail to register user for face authentication."
            }
  face_login:
    description: Login to a user account using face image
    parameters:
      collectionId:
        type: string
        description: "ID of the collection"
        example: "SyncanoFaces"
      image:
        type: string
        description: "Path to image or an S3 object key"
      bucketName:
        type: string
        description: "Name of s3 bucket. Leave empty if image not on s3 bucket."
    response:
      mimetype: application/json
      examples:
        -
          exit_code: 200
          description: Success
          example: |
            {
            "statusCode": 200,
            "userId": "12345",
            }
        -
          exit_code: 400
          description: Failed
          example: |
            {
              "statusCode": 400,
              "code": "InvalidImageFormatException",
              "message":"The provided image format is not supported."
            }
  register:
    file: face_auth.js
    parameters:
      username:
        type: string
        description: User name
        example: joe
      password:
        type: string
        description: User password
        example: super-sercret-password
